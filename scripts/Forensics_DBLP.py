import pymysql
import scholarly
from urllib.request import Request, urlopen
import re
import requests
import hashlib
import sys
import xml.sax
from lxml import etree
from collections import namedtuple

connection = pymysql.connect(host='127.0.0.1', user='root', port=3306, password='', db='forensics', cursorclass=pymysql.cursors.DictCursor)

cursor = connection.cursor()

#get all titles
n = cursor.execute('select id,title from papers where doi=0') 
c = cursor.fetchall()

for i in range(0,28):
    print(i)
    print('-------------------------------')
    paper_id=c[i]['id']
    title=c[i]['title']
    print(title)
    #conf = cursor.execute("select abv_name from venues where id=%s", id)
    #confName1 = cursor.fetchone()
    #confName = confName1['abv_name']
    baseURL = 'https://dblp.org/search/publ/api?q="'+title + '"&h=1'
    print(baseURL)
    resp = requests.get(baseURL)
    xml = resp.content
    root = etree.fromstring(xml)    
    z=0
    
    for author in root.iter('author'):
        fullname = author.text
        print(fullname)
        auth = fullname.split(' ')
        z=z +1
        firstname = auth[0]
        if auth[-1][1]=='0':
            lastname= auth[-2]
        else:
            lastname=auth[-1]  
        print(fullname, lastname, firstname)    
        q_insert_author = "INSERT INTO authors (firstname,lastname,fullname) SELECT %s,%s,%s WHERE NOT EXISTS (SELECT fullname FROM authors WHERE fullname=%s)"
        cursor.execute(q_insert_author, (firstname,lastname,fullname,fullname))
        author_id = connection.insert_id()
        print("author read", author_id)
        if author_id == 0:
            q_duplicate_author = "SELECT id FROM authors WHERE firstname = %s AND fullname=%s;"
            cursor.execute(q_duplicate_author, (firstname,fullname))
            author_id = cursor.fetchone()['id']
            print("author duplicate id", author_id)
        q_insert_author_paper = "INSERT IGNORE INTO author_paper (paper_id, author_id) VALUES (%s,%s)"
        cursor.execute(q_insert_author_paper, (paper_id, author_id))
        print('new author', paper_id, author_id) 
    venue=0      
    authLen=z    
    year=0
    doi=0
    print(authLen)
    for info in root.iter('doi'):
        doi=info.text
        print("DOI:", doi)    
    for info in root.iter('year'):
        year=info.text
        #print('year:', year)
    for venue in root.iter('venue'):
        v = venue.text
        #print(venue.text)              
    updateStatement = "UPDATE papers set doi=%s where id=%s"
    cursor.execute(updateStatement, (doi ,paper_id ))
    connection.commit()   

