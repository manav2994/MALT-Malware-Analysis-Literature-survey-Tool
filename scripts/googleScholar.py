#!/usr/bin/python
# -*- coding: utf-8 -*-

import scholarly
import pymysql
import re
from urllib.request import Request, urlopen
import requests
import os
import sys
import time
connection = pymysql.connect(host='127.0.0.1', user='root', port=3306, password='', db='forensics', cursorclass=pymysql.cursors.DictCursor)

servers = ['Mountain', 'Ranch', 'Cub', 'Snow', 'Vice', 'Empire', 'Precedent', 'Dogg', 'Cobain', 'Montreal', 'Granville','Vansterdam', 'Custard', 'Crumpets']


#f = open("malware_papers_hw2.txt", "r")
cursor = connection.cursor()
n = cursor.execute("SELECT * from papers")
c = cursor.fetchall()
kv = re.compile(r'\b(?P<key>\w+)={(?P<value>[^}]+)}')
serverCount = int(sys.argv[2])
num = int(sys.argv[1])

def search(num,serverCount):
    for i in range(num,161):
        print("Paper Index: ", i)
        print("Server Index: ", serverCount)
        title =  c[i]['title']
        paper_id = c[i]['id']
        print(title)
        print('-------------------------------')
        query=scholarly.search_pubs_query(title)
        try:
            papers = next(query)
        except:
            print("Not Found")
            print("Changing Server")
            if serverCount > 13:
                serverCount = 0
            run = 'windscribe connect ' + servers[serverCount]
            os.system(run)
            serverCount = serverCount + 1
            time.sleep(5)
            print('changed')
            break
            #time.sleep(5)
            #search(i, serverCount)
            #continue
        print("Getting citedBy")
        for citation in  papers.get_citedby():
            citTitle = citation.bib['title']
            q_find_id="SELECT id from papers where title=%s"
            checkFind = cursor.execute(q_find_id, citTitle)
            if checkFind ==1:
                citedby_id = cursor.fetchone()['id']
                q_insert_cite = "INSERT IGNORE INTO citedBy (paper_id, citedby_id) VALUES(%s ,%s)"
                cursor.execute(q_insert_cite, (paper_id, citedby_id))
                print(paper_id, citedby_id)
                print("Inserted:", citTitle)
            else:
                print("Not Found", citTitle)   
            connection.commit()

        try:
            bib= papers.url_scholarbib
            req = Request(bib, headers={'User-Agent': 'Mozilla/5.0'})
            sbib = str(urlopen(req).read())
            print(sbib)
            #req = Request(bib, headers={'User-Agent': 'Mozilla/5.0'})
            #print('Req:', req)
            ### Getting author and other details from bibtex URL
            a = dict(kv.findall(sbib))
            auth = a['author']
            try:
                year = a['year']
            except:
                year=0
            split_authors = auth.split('and')
            author_count= len(split_authors)
            print('author_count:', author_count)
            authors = []
        except:
            bib = "None"
            year=0
            author_count=0
            print("No Authors for:")
            print(papers.bib['title'])
            print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
        if author_count==0:
            continue
        else:            
            for xy in range(author_count):
                print(xy)
                authors.append(split_authors[xy].split(','))
                print(authors)
                try:
                    first = authors[xy][1].strip()
                    first_split =first.split(' ')
                    firstname=first_split[0]
                    lastname = authors[xy][0].strip()
                    fullname= first + ' ' + lastname
                    print("fullname:", fullname)
                except:
                    continue    
                print("-----------------")
                # insert author
                q_insert_author = "INSERT INTO authors (firstname,lastname,fullname) SELECT %s,%s,%s WHERE NOT EXISTS (SELECT fullname FROM authors WHERE fullname = %s)"
                cursor.execute(q_insert_author, (firstname, lastname, fullname, fullname))
                author_id = connection.insert_id()
                print("author read", author_id)
                #if duplicate
                if author_id == 0:
                    q_duplicate_author = "SELECT id FROM authors WHERE fullname = %s;"
                    cursor.execute(q_duplicate_author, (fullname))
                    author_id = cursor.fetchone()['id']
                    print("author duplicate id", author_id)
                # Insert into author-paper
                q_insert_author_paper = "INSERT IGNORE INTO author_paper (paper_id, author_id) VALUES (%s,%s)"
                cursor.execute(q_insert_author_paper, (paper_id, author_id))
                print('new author', paper_id, author_id)
        updateStatement = "UPDATE papers set year=%s, author_count=%s where id=%s"
        cursor.execute(updateStatement, (year, author_count, paper_id))
        connection.commit()
    return
search(num, serverCount)
